# -*- coding: utf-8 -*-
"""LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10jw8IB5CBgSC-rX4HJXCGVP5r6X8BHN8
"""

import pandas as pd
from numpy import array
from keras.models import Sequential
from keras.layers import LSTM, Dense, ReLU
from keras.callbacks import History
from keras.losses import MeanSquaredError

data = pd.read_csv("data.csv")
data.head()

def train_test(df, station = "1 Ave & E 110 St", half_day = 0, type = "pickup"):
  df_slice = df[df["station"] == station]
  df_slice = df_slice[df_slice["half_day"] == half_day]
  data_array = df_slice[["AVG_TEMP", "CASE_COUNT", "DEATH_COUNT", type]].values
  def split_sequences(sequences, n_steps):
    X, y = list(), list()
    for i in range(len(sequences)):
      end_ix = i + n_steps
      if end_ix > len(sequences)-1:
        break
      seq_x, seq_y = sequences[i:end_ix], sequences[end_ix, -1]
      X.append(seq_x)
      y.append(seq_y)
    return array(X), array(y)
  n_steps = 7
  X, y = split_sequences(data_array, n_steps)
  train_n = int(len(y)*0.8)
  X_p = array([data_array[-n_steps:]])
  return X[:train_n], X[train_n:], y[:train_n], y[train_n:], X_p

train_X, test_X, train_y, test_y, predict_x = train_test(data, station = "1 Ave & E 110 St", half_day = 1, type = "pickup")
model = Sequential()
model.add(LSTM(64, activation='relu', input_shape=train_X[0].shape))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')
model.fit(train_X, train_y, validation_split=0.2, shuffle=False, epochs=10, batch_size=16, verbose=0)
yhat = model.predict(predict_x, verbose=0)
yhat[yhat<0] = 0
yhat

import warnings
warnings.filterwarnings("ignore")
station_list = list(data['station'].unique())
station_count = len(station_list)

prediction = []
for i in range(station_count):
  for j in [0,1]:
    for t in ['pickup', 'dropoff']:
      print("\r station {}/{}, half day: {}, type: {}".format(i+1, station_count, j, t), end='')
      train_X, test_X, train_y, test_y, predict_x = train_test(data, station = station_list[i], half_day = j, type = t)
      model = Sequential()
      model.add(LSTM(64, activation='relu', input_shape=train_X[0].shape))
      model.add(Dense(1))
      model.compile(optimizer='adam', loss='mse')
      model.fit(train_X, train_y, validation_split=0.2, shuffle=False, epochs=10, batch_size=16, verbose=0)
      yhat = model.predict(predict_x, verbose=0)
      yhat[yhat<0] = 0
      prediction.append([station_list[i], j, t, yhat[0][0]])
      if (i+1)%100 == 0:
        p_hat = pd.DataFrame(data=array(prediction), columns=['station', 'half_day', 'type', 'value'])
        p_hat.to_csv('LSTM.csv', index=False)

p_hat = pd.DataFrame(data=array(prediction), columns=['station', 'half_day', 'type', 'value'])
p_hat.to_csv('LSTM.csv', index=False)